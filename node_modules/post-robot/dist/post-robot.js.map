{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 1ebb46a37ae1f303046c","webpack:///./node_modules/cross-domain-utils/src/constants.js","webpack:///./node_modules/cross-domain-utils/src/index.js","webpack:///./node_modules/cross-domain-utils/src/util.js","webpack:///./node_modules/cross-domain-utils/src/utils.js","webpack:///./node_modules/cross-domain-safe-weakmap/src/util.js","webpack:///./node_modules/cross-domain-safe-weakmap/src/weakmap.js","webpack:///./node_modules/cross-domain-safe-weakmap/src/native.js","webpack:///./src/conf/constants.js","webpack:///./src/conf/config.js","webpack:///./src/lib/util.js","webpack:///./node_modules/zalgo-promise/src/utils.js","webpack:///./node_modules/zalgo-promise/src/global.js","webpack:///./node_modules/zalgo-promise/src/promise.js","webpack:///./node_modules/zalgo-promise/src/exceptions.js","webpack:///./src/global.js","webpack:///./src/lib/serialize.js","webpack:///./src/lib/ready.js","webpack:///./src/drivers/send/strategies.js","webpack:///./src/drivers/send/index.js","webpack:///./src/drivers/listeners.js","webpack:///./src/drivers/receive/types.js","webpack:///./src/drivers/receive/index.js","webpack:///./src/public/client.js","webpack:///./src/public/server.js","webpack:///./src/public/config.js","webpack:///./src/public/index.js","webpack:///./src/clean.js","webpack:///./src/interface.js","webpack:///./src/index.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","PROTOCOL","WILDCARD","MOCK","FILE","ABOUT","__WEBPACK_IMPORTED_MODULE_0__utils__","__WEBPACK_IMPORTED_MODULE_1__types__","isRegex","item","toString","win","allowMock","arguments","length","undefined","window","err","closed","message","IE_WIN_ACCESS_ERROR","isActuallySameDomain","isAboutProtocol","canReadFromWindow","getDomain","isSameDomain","mockclosed","parent","top","iframeIndex","collection","safeIndexOf","iframeWindows","frame","iframeFrames","contentWindow","parentNode","doc","ownerDocument","documentElement","contains","isFrameWindowClosed","navigator","mockUserAgent","userAgent","child","actualParent","getAncestor","getParent","isAncestorParent","_i7","_getAllChildFrames4","getAllChildFrames","result","_i3","_getFrames2","getFrames","_length2","push","_i5","_getAllChildFrames2","_length4","childFrame","_length6","getTop","_i15","_getFrames8","_length14","Boolean","getOpener","matchDomain","pattern","origin","Array","isArray","match","JSON","stringify","some","subpattern","join","obj","Window","__cross_domain_utils_window_check__","location","protocol","opener","href","getActualDomain","Error","host","domain","mockDomain","indexOf","desc","getOwnPropertyDescriptor","childParent","getParents","frames","len","counter","Date","now","CrossDomainSafeWeakMap","_classCallCheck","Math","random","WeakMap","freeze","testWeakMap","testKey","set","hasNativeWeakMap","weakmap","keys","values","_cleanupClosedWindows","value","isWindow","isWindowClosed","splice","isSafeToReadWrite","key","entry","writable","index","has","getOrSet","CONSTANTS","POST_MESSAGE_TYPE","REQUEST","RESPONSE","ACK","POST_MESSAGE_ACK","SUCCESS","ERROR","POST_MESSAGE_NAMES","METHOD","HELLO","OPEN_TUNNEL","WINDOW_TYPES","FULLPAGE","POPUP","IFRAME","WINDOW_PROPS","POSTROBOT","SERIALIZATION_TYPES","PROMISE","ZALGO_PROMISE","REGEX","SEND_STRATEGIES","POST_MESSAGE","BRIDGE","GLOBAL","MOCK_PROTOCOL","FILE_PROTOCOL","BRIDGE_NAME_PREFIX","POSTROBOT_PROXY","CONFIG","map","ALLOW_POSTMESSAGE_POPUP","__ALLOW_POSTMESSAGE_POPUP__","BRIDGE_TIMEOUT","CHILD_WINDOW_TIMEOUT","ACK_TIMEOUT","RES_TIMEOUT","ALLOWED_POST_MESSAGE_METHODS","_ALLOWED_POST_MESSAGE","ALLOW_SAME_ORIGIN","stringifyError","level","stack","newErr","once","method","called","apply","noop","uniqueID","chars","replace","charAt","floor","replaceObject","callback","depth","newobj","_typeof","TypeError","eachArray","eachObject","each","childItem","isPromise","Promise","constructor","then","getGlobal","glob","global","zalgoGlobal","__zalgopromise__","flushPromises","activeCount","possiblyUnhandledPromiseHandlers","dispatchedErrors","ZalgoPromise","handler","_this","promise__classCallCheck","resolved","rejected","errorHandled","handlers","error","isAsync","res","resolve","reject","dispatch","_this2","setTimeout","promise","j","dispatchPossiblyUnhandledError","asyncReject","_this3","dispatching","_loop","_handlers$i","onSuccess","onError","flushQueue","onFinally","timeout","time","_this4","clearTimeout","toPromise","all","promises","count","results","_loop2","prom","hash","items","onPossiblyUnhandledException","cancel","context","args","delay","flush","promisesToFlush","_i2","registerSelf","methods","listenForMethods","on","_ref","source","data","meth","id","isSerialized","type","serialize__typeof","__type__","serializeMethod","destination","__id__","__name__","deserializeMethod","wrapper","slice","send","_ref2","__xdomain__","deserializeZalgoPromise","__then__","readyPromises","sayHello","SEND_MESSAGE_STRATEGIES","serializedMessage","dom","forEach","postMessage","sendMessage","_jsonStringify","options","isPopup","isIframe","sourceDomain","_extends","windowType","buildMessage","__message__","__code__","code","serializePromise","serializeZalgoPromise","regex","__source__","serializeMethods","messages","replacer","indent","objectToJSON","arrayToJSON","toJSON","jsonStringify","strategyName","success","status","responseListeners","requestListeners","WINDOW_WILDCARD","erroredResponseListeners","__DOMAIN_REGEX__","getResponseListener","deleteResponseListener","isResponseListenerErrored","getRequestListener","nameListeners","_ref3","winQualifier","winListeners","_i4","_winListeners$__DOMAI2","_ref5","listener","RECEIVE_MESSAGE_TYPES","pathname","ack","_RECEIVE_MESSAGE_TYPE","respond","fireAndForget","types__extends","target","originalSource","handleError","stringifyDomainPattern","response","receivedMessages","receiveMessage","event","parsedMessage","parse","receive__typeof","parseMessage","deserializeError","deserializePromise","RegExp","deserializeRegex","deserializeMethods","messageListener","sourceElement","originalEvent","requestPromises","request","targetWindow","el","document","getElementById","tagName","toLowerCase","HTMLIFrameElement","hasResult","requestPromise","isAncestor","onChildWindowReady","actualDomain","responseListener","addResponseListener","ackTimeout","resTimeout","cycleTime","cycle","max","min","markResponseListenerErrored","sendToParent","client","listen","listenerOptions","errorHandler","requestListener","addRequestListener","_ref6","listenersCollection","_i6","_win2","_i8","_length8","_i10","_domain2","_length10","_i12","_length12","existingListener","strDomain","regexListeners","regexListener","onceFunction","errorOnClose","interval","runInterval","server__typeof","safeInterval","onceListener","disable","removeEventListener","cleanUpWindow","popupWindowsByWin","remoteWindows","bridge","init","initialized","addEventListener","attachEvent","initOnReady","INTERFACE"],"mappings":"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","file":"post-robot.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"postRobot\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"postRobot\"] = factory();\n\telse\n\t\troot[\"postRobot\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1ebb46a37ae1f303046c","/* @flow */\n\nexport const PROTOCOL = {\n    MOCK:  ('mock:' : 'mock:'),\n    FILE:  ('file:' : 'file:'),\n    ABOUT: ('about:' : 'about:')\n};\n\nexport const WILDCARD = '*';\n\nexport const WINDOW_TYPE = {\n    IFRAME: ('iframe' : 'iframe'),\n    POPUP:  ('popup' : 'popup')\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/cross-domain-utils/src/constants.js","/* @flow */\n\nexport * from './utils';\nexport * from './types';\nexport * from './constants';\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/cross-domain-utils/src/index.js","/* @flow */\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/cross-domain-utils/src/util.js","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isRegex, noop } from './util';\nimport type { CrossDomainWindowType, SameDomainWindowType, DomainMatcher } from './types';\nimport { PROTOCOL, WILDCARD } from './constants';\n\nlet IE_WIN_ACCESS_ERROR = 'Call was rejected by callee.\\r\\n';\n\nexport function isFileProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.FILE;\n}\n\nexport function isAboutProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.ABOUT;\n}\n\nexport function getParent(win : ?CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.parent && win.parent !== win) {\n            return win.parent;\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getOpener(win : ?CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    // Make sure we're not actually an iframe which has had window.open() called on us\n    if (getParent(win)) {\n        return;\n    }\n\n    try {\n        return win.opener;\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function canReadFromWindow(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        noop(win && win.location && win.location.href);\n        return true;\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function getActualDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let location = win.location;\n\n    if (!location) {\n        throw new Error(`Can not read window location`);\n    }\n\n    let protocol = location.protocol;\n\n    if (!protocol) {\n        throw new Error(`Can not read window protocol`);\n    }\n\n    if (protocol === PROTOCOL.FILE) {\n        return `${ PROTOCOL.FILE }//`;\n    }\n\n    if (protocol === PROTOCOL.ABOUT) {\n\n        let parent = getParent(win);\n        if (parent && canReadFromWindow(parent)) {\n            // $FlowFixMe\n            return getActualDomain(parent);\n        }\n\n        return `${ PROTOCOL.ABOUT }//`;\n    }\n\n    let host = location.host;\n\n    if (!host) {\n        throw new Error(`Can not read window host`);\n    }\n\n    return `${ protocol }//${ host }`;\n}\n\nexport function getDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let domain = getActualDomain(win);\n\n    if (domain && win.mockDomain && win.mockDomain.indexOf(PROTOCOL.MOCK) === 0) {\n        return win.mockDomain;\n    }\n\n    return domain;\n}\n\nexport function isBlankDomain(win : CrossDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        if (!win.location.href) {\n            return true;\n        }\n\n        if (win.location.href === 'about:blank') {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isActuallySameDomain(win : CrossDomainWindowType) : boolean {\n\n    try {\n        if (win === window) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        let desc = Object.getOwnPropertyDescriptor(win, 'location');\n\n        if (desc && desc.enumerable === false) {\n            return false;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (getActualDomain(win) === getActualDomain(window)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n\n    if (!isActuallySameDomain(win)) {\n        return false;\n    }\n\n    try {\n\n        if (win === window) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (getDomain(window) === getDomain(win)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\n\nexport function assertSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : SameDomainWindowType {\n    if (!isSameDomain(win)) {\n        throw new Error(`Expected window to be same domain`);\n    }\n\n    // $FlowFixMe\n    return win;\n}\n\nexport function getParents(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    try {\n\n        while (win.parent !== win) {\n            result.push(win.parent);\n            win = win.parent;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return result;\n}\n\nexport function isAncestorParent(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    if (!parent || !child) {\n        return false;\n    }\n\n    let childParent = getParent(child);\n\n    if (childParent) {\n        return childParent === parent;\n    }\n\n    if (getParents(child).indexOf(parent) !== -1) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    let frames;\n\n    try {\n        frames = win.frames;\n    } catch (err) {\n        frames = win;\n    }\n\n    let len;\n\n    try {\n        len = frames.length;\n    } catch (err) {\n        // pass\n    }\n\n    if (len === 0) {\n        return result;\n    }\n\n    if (len) {\n        for (let i = 0; i < len; i++) {\n\n            let frame;\n\n            try {\n                frame = frames[i];\n            } catch (err) {\n                continue;\n            }\n\n            result.push(frame);\n        }\n\n        return result;\n    }\n\n    for (let i = 0; i < 100; i++) {\n        let frame;\n\n        try {\n            frame = frames[i];\n        } catch (err) {\n            return result;\n        }\n\n        if (!frame) {\n            return result;\n        }\n\n        result.push(frame);\n    }\n\n    return result;\n}\n\n\nexport function getAllChildFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    for (let frame of getFrames(win)) {\n        result.push(frame);\n\n        for (let childFrame of getAllChildFrames(frame)) {\n            result.push(childFrame);\n        }\n    }\n\n    return result;\n}\n\nexport function getTop(win : CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.top) {\n            return win.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    if (getParent(win) === win) {\n        return win;\n    }\n\n    try {\n        if (isAncestorParent(window, win) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (isAncestorParent(win, window) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    for (let frame of getAllChildFrames(win)) {\n        try {\n            if (frame.top) {\n                return frame.top;\n            }\n        } catch (err) {\n            // pass\n        }\n\n        if (getParent(frame) === frame) {\n            return frame;\n        }\n    }\n}\n\nexport function getNextOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    return getOpener(getTop(win) || win);\n}\n\nexport function getUltimateTop(win? : CrossDomainWindowType = window) : CrossDomainWindowType {\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return getUltimateTop(opener);\n    }\n\n    return top;\n}\n\nexport function getAllFramesInWindow(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n    let top = getTop(win);\n\n    if (!top) {\n        throw new Error(`Can not determine top window`);\n    }\n\n    return [ ...getAllChildFrames(top), top ];\n}\n\nexport function getAllWindows(win? : CrossDomainWindowType = window) : $ReadOnlyArray<CrossDomainWindowType> {\n    let frames = getAllFramesInWindow(win);\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return [ ...getAllWindows(opener), ...frames ];\n    } else {\n        return frames;\n    }\n}\n\nexport function isTop(win : CrossDomainWindowType) : boolean {\n    return win === getTop(win);\n}\n\nexport function isFrameWindowClosed(frame : HTMLIFrameElement) : boolean {\n\n    if (!frame.contentWindow) {\n        return true;\n    }\n\n    if (!frame.parentNode) {\n        return true;\n    }\n\n    let doc = frame.ownerDocument;\n\n    if (doc && doc.documentElement && !doc.documentElement.contains(frame)) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\nlet iframeWindows = [];\nlet iframeFrames = [];\n\nexport function isWindowClosed(win : CrossDomainWindowType, allowMock : boolean = true) : boolean {\n\n    try {\n        if (win === window) {\n            return false;\n        }\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (!win) {\n            return true;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (win.closed) {\n            return true;\n        }\n\n    } catch (err) {\n\n        // I love you so much IE\n\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    if (allowMock && isSameDomain(win)) {\n        try {\n            // $FlowFixMe\n            if (win.mockclosed) {\n                return true;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    // Mobile safari\n\n    try {\n        if (!win.parent || !win.top) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    // Yes, this actually happens in IE. win === win errors out when the window\n    // is from an iframe, and the iframe was removed from the page.\n\n    try {\n        noop(win === win); // eslint-disable-line no-self-compare\n    } catch (err) {\n        return true;\n    }\n\n    // IE orphaned frame\n\n    let iframeIndex = safeIndexOf(iframeWindows, win);\n\n    if (iframeIndex !== -1) {\n        let frame = iframeFrames[iframeIndex];\n\n        if (frame && isFrameWindowClosed(frame)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction cleanIframes() {\n    for (let i = 0; i < iframeWindows.length; i++) {\n        let closed = false;\n\n        try {\n            closed = iframeWindows[i].closed;\n        } catch (err) {\n            // pass\n        }\n\n        if (closed) {\n            iframeFrames.splice(i, 1);\n            iframeWindows.splice(i, 1);\n        }\n    }\n}\n\nexport function linkFrameWindow(frame : HTMLIFrameElement) {\n\n    cleanIframes();\n\n    if (frame && frame.contentWindow) {\n        try {\n            iframeWindows.push(frame.contentWindow);\n            iframeFrames.push(frame);\n        } catch (err) {\n            // pass\n        }\n    }\n}\n\nexport function getUserAgent(win : ?SameDomainWindowType) : string {\n    win = win || window;\n    return win.navigator.mockUserAgent || win.navigator.userAgent;\n}\n\n\nexport function getFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let winFrames = getFrames(win);\n\n    for (let childFrame of winFrames) {\n        try {\n            // $FlowFixMe\n            if (isSameDomain(childFrame) && childFrame.name === name && winFrames.indexOf(childFrame) !== -1) {\n                return childFrame;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    try {\n        // $FlowFixMe\n        if (winFrames.indexOf(win.frames[name]) !== -1) {\n            // $FlowFixMe\n            return win.frames[name];\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (winFrames.indexOf(win[name]) !== -1) {\n            return win[name];\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function findChildFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        let namedFrame = findChildFrameByName(childFrame, name);\n\n        if (namedFrame) {\n            return namedFrame;\n        }\n    }\n}\n\nexport function findFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame;\n\n    frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    let top = getTop(win) || win;\n\n    return findChildFrameByName(top, name);\n}\n\nexport function isParent(win : CrossDomainWindowType, frame : CrossDomainWindowType) : boolean {\n\n    let frameParent = getParent(frame);\n\n    if (frameParent) {\n        return frameParent === win;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        if (childFrame === frame) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isOpener(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    return parent === getOpener(child);\n}\n\nexport function getAncestor(win : ?CrossDomainWindowType) : ?CrossDomainWindowType {\n    win = win || window;\n\n    let opener = getOpener(win);\n\n    if (opener) {\n        return opener;\n    }\n\n    let parent = getParent(win);\n\n    if (parent) {\n        return parent;\n    }\n}\n\nexport function getAncestors(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let results = [];\n\n    let ancestor = win;\n\n    while (ancestor) {\n        ancestor = getAncestor(ancestor);\n        if (ancestor) {\n            results.push(ancestor);\n        }\n    }\n\n    return results;\n}\n\n\nexport function isAncestor(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    let actualParent = getAncestor(child);\n\n    if (actualParent) {\n        if (actualParent === parent) {\n            return true;\n        }\n\n        return false;\n    }\n\n    if (child === parent) {\n        return false;\n    }\n\n    if (getTop(child) === child) {\n        return false;\n    }\n\n    for (let frame of getFrames(parent)) {\n        if (frame === child) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isPopup() : boolean {\n    return Boolean(getOpener(window));\n}\n\nexport function isIframe() : boolean {\n    return Boolean(getParent(window));\n}\n\nexport function isFullpage() : boolean {\n    return Boolean(!isIframe() && !isPopup());\n}\n\nfunction anyMatch(collection1, collection2) : boolean {\n\n    for (let item1 of collection1) {\n        for (let item2 of collection2) {\n            if (item1 === item2) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nexport function getDistanceFromTop(win : CrossDomainWindowType = window) : number {\n    let distance = 0;\n    let parent = win;\n\n    while (parent) {\n        parent = getParent(parent);\n        if (parent) {\n            distance += 1;\n        }\n    }\n\n    return distance;\n}\n\nexport function getNthParent(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    let parent = win;\n\n    for (let i = 0; i < n; i++) {\n        if (!parent) {\n            return;\n        }\n\n        parent = getParent(parent);\n    }\n\n    return parent;\n}\n\nexport function getNthParentFromTop(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    return getNthParent(win, getDistanceFromTop(win) - n);\n}\n\nexport function isSameTopWindow(win1 : CrossDomainWindowType, win2 : CrossDomainWindowType) : boolean {\n\n    let top1 = getTop(win1) || win1;\n    let top2 = getTop(win2) || win2;\n\n    try {\n        if (top1 && top2) {\n            if (top1 === top2) {\n                return true;\n            }\n\n            return false;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    let allFrames1 = getAllFramesInWindow(win1);\n    let allFrames2 = getAllFramesInWindow(win2);\n\n    if (anyMatch(allFrames1, allFrames2)) {\n        return true;\n    }\n\n    let opener1 = getOpener(top1);\n    let opener2 = getOpener(top2);\n\n    if (opener1 && anyMatch(getAllFramesInWindow(opener1), allFrames2)) {\n        return false;\n    }\n\n    if (opener2 && anyMatch(getAllFramesInWindow(opener2), allFrames1)) {\n        return false;\n    }\n\n    return false;\n}\n\nexport function matchDomain(pattern : DomainMatcher, origin : DomainMatcher) : boolean {\n\n    if (typeof pattern === 'string') {\n\n        if (typeof origin === 'string') {\n            return pattern === WILDCARD || origin === pattern;\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n    }\n\n    if (isRegex(pattern)) {\n\n        if (isRegex(origin)) {\n            return pattern.toString() === origin.toString();\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n\n        // $FlowFixMe\n        return Boolean(origin.match(pattern));\n    }\n\n    if (Array.isArray(pattern)) {\n\n        if (Array.isArray(origin)) {\n            return JSON.stringify(pattern) === JSON.stringify(origin);\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        return pattern.some(subpattern => matchDomain(subpattern, origin));\n    }\n\n    return false;\n}\n\nexport function stringifyDomainPattern(pattern : DomainMatcher) : string {\n    if (Array.isArray(pattern)) {\n        return `(${ pattern.join(' | ') })`;\n    } else if (isRegex(pattern)) {\n        return `RegExp(${ pattern.toString() }`;\n    } else {\n        return pattern.toString();\n    }\n}\n\nexport function getDomainFromUrl(url : string) : string {\n\n    let domain;\n\n    if (url.match(/^(https?|mock|file):\\/\\//)) {\n        domain = url;\n    } else {\n        return getDomain();\n    }\n\n    domain = domain.split('/').slice(0, 3).join('/');\n\n    return domain;\n}\n\nexport function onCloseWindow(win : CrossDomainWindowType, callback : Function, delay : number = 1000, maxtime : number = Infinity) : { cancel : () => void } {\n\n    let timeout;\n\n    let check = () => {\n\n        if (isWindowClosed(win)) {\n\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n\n            return callback();\n        }\n\n        if (maxtime <= 0) {\n            clearTimeout(timeout);\n        } else {\n            maxtime -= delay;\n            timeout = setTimeout(check, delay);\n        }\n    };\n\n    check();\n\n    return {\n        cancel() {\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n        }\n    };\n}\n\n// eslint-disable-next-line complexity\nexport function isWindow(obj : Object) : boolean {\n\n    try {\n        if (obj === window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (Object.prototype.toString.call(obj) === '[object Window]') {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (window.Window && obj instanceof window.Window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.self === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.parent === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.top === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        noop(obj === obj);  // eslint-disable-line no-self-compare\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        noop(obj && obj.__cross_domain_utils_window_check__);\n\n    } catch (err) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined' && typeof window.location !== 'undefined');\n}\n\nexport function isCurrentDomain(domain : string) : boolean {\n    if (!isBrowser()) {\n        return false;\n    }\n\n    return (getDomain() === domain);\n}\n\nexport function isMockDomain(domain : string) : boolean {\n    return domain.indexOf(PROTOCOL.MOCK) === 0;\n}\n\nexport function normalizeMockUrl(url : string) : string {\n    if (!isMockDomain(getDomainFromUrl(url))) {\n        return url;\n    }\n\n    if (!__TEST__) {\n        throw new Error(`Mock urls not supported out of test mode`);\n    }\n\n    return url.replace(/^mock:\\/\\/[^/]+/, getActualDomain(window));\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/cross-domain-utils/src/utils.js","/* @flow */\n\nexport function safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/cross-domain-safe-weakmap/src/util.js","/* @flow */\n\nimport { isWindow, isWindowClosed } from 'cross-domain-utils/src';\n\nimport { hasNativeWeakMap } from './native';\nimport { noop, safeIndexOf } from './util';\n\nlet defineProperty = Object.defineProperty;\nlet counter = Date.now() % 1e9;\n\nexport class CrossDomainSafeWeakMap<K : Object, V : mixed> {\n\n    name : string\n    weakmap : WeakMap<K, V>\n    keys : Array<K>\n    values : Array<V>\n\n    constructor() {\n        counter += 1;\n\n        // eslint-disable-next-line no-bitwise\n        this.name = `__weakmap_${ Math.random() * 1e9 >>> 0 }__${ counter }`;\n\n        if (hasNativeWeakMap()) {\n            try {\n                this.weakmap = new WeakMap();\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this.keys  = [];\n        this.values = [];\n    }\n\n    _cleanupClosedWindows() {\n\n        let weakmap = this.weakmap;\n        let keys = this.keys;\n\n        for (let i = 0; i < keys.length; i++) {\n            let value = keys[i];\n\n            if (isWindow(value) && isWindowClosed(value)) {\n\n                if (weakmap) {\n                    try {\n                        weakmap.delete(value);\n                    } catch (err) {\n                        // pass\n                    }\n                }\n\n                keys.splice(i, 1);\n                this.values.splice(i, 1);\n\n                i -= 1;\n            }\n        }\n    }\n\n    isSafeToReadWrite(key : K) : boolean {\n\n        if (isWindow(key)) {\n            return false;\n        }\n\n        try {\n            noop(key && key.self);\n            noop(key && key[this.name]);\n        } catch (err) {\n            return false;\n        }\n\n        return true;\n    }\n\n    set(key : K, value : V) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.set(key, value);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let keys = this.keys;\n            let values = this.values;\n            let index = safeIndexOf(keys, key);\n\n            if (index === -1) {\n                keys.push(key);\n                values.push(value);\n            } else {\n                values[index] = value;\n            }\n\n        } else {\n\n            let name = this.name;\n            let entry = key[name];\n\n            if (entry && entry[0] === key) {\n                entry[1] = value;\n            } else {\n                defineProperty(key, name, {\n                    value:    [ key, value ],\n                    writable: true\n                });\n            }\n        }\n    }\n\n    get(key : K) : V | void {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return weakmap.get(key);\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let keys = this.keys;\n            let index = safeIndexOf(keys, key);\n\n            if (index === -1) {\n                return;\n            }\n\n            return this.values[index];\n\n        } else {\n\n            let entry = key[this.name];\n\n            if (entry && entry[0] === key) {\n                return entry[1];\n            }\n        }\n    }\n\n    delete(key : K) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.delete(key);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let keys = this.keys;\n            let index = safeIndexOf(keys, key);\n\n            if (index !== -1) {\n                keys.splice(index, 1);\n                this.values.splice(index, 1);\n            }\n\n        } else {\n\n            let entry = key[this.name];\n\n            if (entry && entry[0] === key) {\n                entry[0] = entry[1] = undefined;\n            }\n        }\n    }\n\n    has(key : K) : boolean {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return true;\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let index = safeIndexOf(this.keys, key);\n            return index !== -1;\n\n        } else {\n\n            let entry = key[this.name];\n\n            if (entry && entry[0] === key) {\n                return true;\n            }\n\n            return false;\n        }\n    }\n\n    getOrSet(key : K, getter : () => V) : V {\n        if (this.has(key)) {\n            // $FlowFixMe\n            return this.get(key);\n        }\n\n        let value = getter();\n        this.set(key, value);\n        return value;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/cross-domain-safe-weakmap/src/weakmap.js","/* @flow */\n\nexport function hasNativeWeakMap() : boolean {\n\n    if (typeof WeakMap === 'undefined') {\n        return false;\n    }\n\n    if (typeof Object.freeze === 'undefined') {\n        return false;\n    }\n\n    try {\n\n        let testWeakMap = new WeakMap();\n        let testKey = {};\n        let testValue = '__testvalue__';\n\n        Object.freeze(testKey);\n\n        testWeakMap.set(testKey, testValue);\n\n        if (testWeakMap.get(testKey) === testValue) {\n            return true;\n        }\n\n        return false;\n\n    } catch (err) {\n\n        return false;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/cross-domain-safe-weakmap/src/native.js","/* @flow */\n\nexport let CONSTANTS = {\n\n    POST_MESSAGE_TYPE: {\n        REQUEST:  'postrobot_message_request',\n        RESPONSE: 'postrobot_message_response',\n        ACK:      'postrobot_message_ack'\n    },\n\n    POST_MESSAGE_ACK: {\n        SUCCESS: 'success',\n        ERROR:   'error'\n    },\n\n    POST_MESSAGE_NAMES: {\n        METHOD:      'postrobot_method',\n        HELLO:       'postrobot_ready',\n        OPEN_TUNNEL: 'postrobot_open_tunnel'\n    },\n\n    WINDOW_TYPES: {\n        FULLPAGE: 'fullpage',\n        POPUP:    'popup',\n        IFRAME:   'iframe'\n    },\n\n    WINDOW_PROPS: {\n        POSTROBOT: '__postRobot__'\n    },\n\n    SERIALIZATION_TYPES: {\n        METHOD:        'postrobot_method',\n        ERROR:         'postrobot_error',\n        PROMISE:       'postrobot_promise',\n        ZALGO_PROMISE: 'postrobot_zalgo_promise',\n        REGEX:         'regex'\n    },\n\n    SEND_STRATEGIES: {\n        POST_MESSAGE: 'postrobot_post_message',\n        BRIDGE:       'postrobot_bridge',\n        GLOBAL:       'postrobot_global'\n    },\n\n    MOCK_PROTOCOL: 'mock:',\n    FILE_PROTOCOL: 'file:',\n\n    BRIDGE_NAME_PREFIX: '__postrobot_bridge__',\n    POSTROBOT_PROXY:    '__postrobot_proxy__',\n\n    WILDCARD: '*'\n};\n\nexport const POST_MESSAGE_NAMES = {\n    METHOD:      'postrobot_method',\n    HELLO:       'postrobot_hello',\n    OPEN_TUNNEL: 'postrobot_open_tunnel'\n};\n\nexport let POST_MESSAGE_NAMES_LIST : Array<string> = Object.keys(POST_MESSAGE_NAMES)\n    .map(key => POST_MESSAGE_NAMES[key]);\n\n\n\n// WEBPACK FOOTER //\n// ./src/conf/constants.js","/* @flow */\n\nimport { CONSTANTS } from './constants';\n\nexport let CONFIG : Object = {\n\n    ALLOW_POSTMESSAGE_POPUP: ('__ALLOW_POSTMESSAGE_POPUP__' in window)\n        ? window.__ALLOW_POSTMESSAGE_POPUP__\n        : __POST_ROBOT__.__ALLOW_POSTMESSAGE_POPUP__,\n\n    BRIDGE_TIMEOUT:       5000,\n    CHILD_WINDOW_TIMEOUT: 5000,\n\n    ACK_TIMEOUT: (window.navigator.userAgent.match(/MSIE/i) !== -1 && !__TEST__) ? 10000 : 2000,\n    RES_TIMEOUT: __TEST__ ? 2000 : -1,\n    \n    ALLOWED_POST_MESSAGE_METHODS: {\n        [ CONSTANTS.SEND_STRATEGIES.POST_MESSAGE ]: true,\n        [ CONSTANTS.SEND_STRATEGIES.BRIDGE ]:       true,\n        [ CONSTANTS.SEND_STRATEGIES.GLOBAL ]:       true\n    },\n\n    ALLOW_SAME_ORIGIN: false\n};\n\nif (window.location.href.indexOf(CONSTANTS.FILE_PROTOCOL) === 0) {\n    CONFIG.ALLOW_POSTMESSAGE_POPUP = true;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/conf/config.js","/* @flow */\n\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\nimport { isPopup, isIframe, getUserAgent } from 'cross-domain-utils/src';\n\nimport { CONFIG, CONSTANTS } from '../conf';\n\n\nexport function stringifyError(err : mixed, level : number = 1) : string {\n\n    if (level >= 3) {\n        return 'stringifyError stack overflow';\n    }\n\n    try {\n        if (!err) {\n            return `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n        }\n\n        if (typeof err === 'string') {\n            return err;\n        }\n\n        if (err instanceof Error) {\n            let stack = err && err.stack;\n            let message = err && err.message;\n\n            if (stack && message) {\n                if (stack.indexOf(message) !== -1) {\n                    return stack;\n                } else {\n                    return `${ message }\\n${ stack }`;\n                }\n            } else if (stack) {\n                return stack;\n            } else if (message) {\n                return message;\n            }\n        }\n\n        if (typeof err.toString === 'function') {\n            return err.toString();\n        }\n\n        return Object.prototype.toString.call(err);\n\n    } catch (newErr) { // eslint-disable-line unicorn/catch-error-name\n        return `Error while stringifying error: ${ stringifyError(newErr, level + 1) }`;\n    }\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let once = <T>(method : Function) : ((...args : Array<any>) => T | void) => {\n    if (!method) {\n        return method;\n    }\n    let called = false;\n    return function onceWrapper() : T | void {\n        if (!called) {\n            called = true;\n            return method.apply(this, arguments);\n        }\n    };\n};\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n\nexport function addEventListener(obj : Object, event : string, handler : Function) : { cancel : () => void } {\n    if (obj.addEventListener) {\n        obj.addEventListener(event, handler);\n    } else {\n        obj.attachEvent(`on${ event }`, handler);\n    }\n\n    return {\n        cancel() {\n            if (obj.removeEventListener) {\n                obj.removeEventListener(event, handler);\n            } else {\n                obj.detachEvent(`on${ event }`, handler);\n            }\n        }\n    };\n}\n\nexport function uniqueID() : string {\n\n    let chars = '0123456789abcdef';\n\n    return 'xxxxxxxxxx'.replace(/./g, () => {\n        return chars.charAt(Math.floor(Math.random() * chars.length));\n    });\n}\n\ntype MixedArrayType = Array<mixed>;\n\nexport function eachArray(item : MixedArrayType, callback : (item : mixed, key : number) => mixed) {\n    for (let i = 0; i < item.length; i++) {\n        callback(item[i], i);\n    }\n}\n\nexport function eachObject(item : Object, callback : (item : mixed, key : string) => mixed) {\n    for (let key in item) {\n        if (item.hasOwnProperty(key)) {\n            callback(item[key], key);\n        }\n    }\n}\n\nexport function each<T : Object | MixedArrayType>(item : T, callback : (item : mixed, key : number | string) => mixed) {\n    if (Array.isArray(item)) {\n        eachArray(item, callback);\n    } else if (typeof item === 'object' && item !== null) {\n        eachObject(item, callback);\n    }\n}\n\nexport function replaceObject<T : Object | MixedArrayType>(item : T, callback : (item : mixed, key : number | string) => mixed, depth : number = 1) : T {\n\n    if (depth >= 100) {\n        throw new Error(`Self-referential object passed, or object contained too many layers`);\n    }\n\n    let newobj;\n\n    if (typeof item === 'object' && item !== null && !Array.isArray(item)) {\n        newobj = {};\n    } else if (Array.isArray(item)) {\n        newobj = [];\n    } else {\n        throw new TypeError(`Invalid type: ${ typeof item }`);\n    }\n\n    each(item, (childItem, key) => {\n\n        let result = callback(childItem, key);\n\n        if (typeof result !== 'undefined') {\n            // $FlowFixMe\n            newobj[key] = result;\n        } else if (typeof childItem === 'object' && childItem !== null) {\n            // $FlowFixMe\n            newobj[key] = replaceObject(childItem, callback, depth + 1);\n        } else {\n            // $FlowFixMe\n            newobj[key] = childItem;\n        }\n    });\n\n    // $FlowFixMe\n    return newobj;\n}\n\nexport function safeInterval(method : Function, time : number) : { cancel : () => void } {\n    let timeout;\n\n    function runInterval() {\n        timeout = setTimeout(runInterval, time);\n        method.call();\n    }\n\n    timeout = setTimeout(runInterval, time);\n\n    return {\n        cancel() {\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\n\ntype FunctionProxy<T : Function> = (method : T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoize : FunctionProxy<*> = <R : mixed>(method : (arg : any) => R) : ((...args : Array<any>) => R) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoized(arg : any) : R {\n        let result = weakmap.get(arg);\n\n        if (typeof result !== 'undefined') {\n            return result;\n        }\n\n        result = method.call(this, arg);\n\n        if (typeof result !== 'undefined') {\n            weakmap.set(arg, result);\n        }\n\n        return result;\n    };\n};\n\nexport function getWindowType() : string {\n    if (isPopup()) {\n        return CONSTANTS.WINDOW_TYPES.POPUP;\n    }\n    if (isIframe()) {\n        return CONSTANTS.WINDOW_TYPES.IFRAME;\n    }\n    return CONSTANTS.WINDOW_TYPES.FULLPAGE;\n}\n\nexport function jsonStringify<T : mixed>(obj : T, replacer : ?Function, indent : number | void) : string {\n\n    let objectToJSON;\n    let arrayToJSON;\n\n    try {\n        if (JSON.stringify({}) !== '{}') {\n            // $FlowFixMe\n            objectToJSON = Object.prototype.toJSON;\n            // $FlowFixMe\n            delete Object.prototype.toJSON;\n        }\n\n        if (JSON.stringify({}) !== '{}') {\n            throw new Error(`Can not correctly serialize JSON objects`);\n        }\n\n        if (JSON.stringify([]) !== '[]') {\n            // $FlowFixMe\n            arrayToJSON  = Array.prototype.toJSON;\n            // $FlowFixMe\n            delete Array.prototype.toJSON;\n        }\n\n        if (JSON.stringify([]) !== '[]') {\n            throw new Error(`Can not correctly serialize JSON objects`);\n        }\n\n    } catch (err) {\n        throw new Error(`Can not repair JSON.stringify: ${ err.message }`);\n    }\n\n    let result = JSON.stringify.call(this, obj, replacer, indent);\n\n    try {\n        if (objectToJSON) {\n            // $FlowFixMe\n            Object.prototype.toJSON = objectToJSON; // eslint-disable-line no-extend-native\n        }\n\n        if (arrayToJSON) {\n            // $FlowFixMe\n            Array.prototype.toJSON = arrayToJSON; // eslint-disable-line no-extend-native\n        }\n\n    } catch (err) {\n        throw new Error(`Can not repair JSON.stringify: ${ err.message }`);\n    }\n\n\n    return result;\n}\n\nexport function jsonParse(item : string) : mixed {\n    return JSON.parse(item);\n}\n            \nexport function needsGlobalMessagingForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n        \n    if (!CONFIG.ALLOW_POSTMESSAGE_POPUP) {\n        return true;\n    }\n        \n    return false;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/util.js","/* @flow */\n\nexport function isPromise(item : mixed) : boolean {\n    try {\n        if (!item) {\n            return false;\n        }\n\n        if (typeof Promise !== 'undefined' && item instanceof Promise) {\n            return true;\n        }\n\n        if (typeof window !== 'undefined' && window.Window && item instanceof window.Window) {\n            return false;\n        }\n\n        if (typeof window !== 'undefined' && window.constructor && item instanceof window.constructor) {\n            return false;\n        }\n\n        let toString = ({}).toString;\n\n        if (toString) {\n            let name = toString.call(item);\n\n            if (name === '[object Window]' || name === '[object global]' || name === '[object DOMWindow]') {\n                return false;\n            }\n        }\n\n        if (typeof item.then === 'function') {\n            return true;\n        }\n    } catch (err) {\n        return false;\n    }\n\n    return false;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/zalgo-promise/src/utils.js","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\ntype ZalgoGlobalType = {\n    flushPromises : Array<ZalgoPromise<mixed>>,\n    activeCount : number,\n    possiblyUnhandledPromiseHandlers : Array<<T>(mixed, ZalgoPromise<T>) => void>, // eslint-disable-line no-undef\n    dispatchedErrors : Array<mixed>\n};\n\nexport function getGlobal() : ZalgoGlobalType {\n\n    let glob;\n\n    if (typeof window !== 'undefined') {\n        glob = window;\n    } else if (typeof global !== 'undefined') {\n        glob = global;\n    } else {\n        throw new TypeError(`Can not find global`);\n    }\n\n    let zalgoGlobal = glob.__zalgopromise__ = glob.__zalgopromise__ || {};\n    zalgoGlobal.flushPromises = zalgoGlobal.flushPromises || [];\n    zalgoGlobal.activeCount = zalgoGlobal.activeCount || 0;\n    zalgoGlobal.possiblyUnhandledPromiseHandlers = zalgoGlobal.possiblyUnhandledPromiseHandlers || [];\n    zalgoGlobal.dispatchedErrors = zalgoGlobal.dispatchedErrors || [];\n\n    return zalgoGlobal;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/zalgo-promise/src/global.js","/* @flow */\n\nimport { isPromise } from './utils';\nimport { onPossiblyUnhandledException, dispatchPossiblyUnhandledError } from './exceptions';\nimport { getGlobal } from './global';\n\nexport class ZalgoPromise<R : mixed> {\n\n    resolved : boolean\n    rejected : boolean\n    errorHandled : boolean\n    value : R\n    error : mixed\n    handlers : Array<{\n        promise : ZalgoPromise<*>,\n        onSuccess : void | (result : R) => mixed,\n        onError : void | (error : mixed) => mixed\n    }>\n    dispatching : boolean\n    stack : string\n\n    constructor(handler : ?(resolve : (result : R) => void, reject : (error : mixed) => void) => void) {\n\n        this.resolved = false;\n        this.rejected = false;\n        this.errorHandled = false;\n\n        this.handlers = [];\n\n        if (handler) {\n\n            let result;\n            let error;\n            let resolved = false;\n            let rejected = false;\n            let isAsync = false;\n\n            try {\n                handler(res => {\n                    if (isAsync) {\n                        this.resolve(res);\n                    } else {\n                        resolved = true;\n                        result = res;\n                    }\n\n                }, err => {\n                    if (isAsync) {\n                        this.reject(err);\n                    } else {\n                        rejected = true;\n                        error = err;\n                    }\n                });\n\n            } catch (err) {\n                this.reject(err);\n                return;\n            }\n\n            isAsync = true;\n\n            if (resolved) {\n                // $FlowFixMe\n                this.resolve(result);\n            } else if (rejected) {\n                this.reject(error);\n            }\n        }\n\n        if (__DEBUG__) {\n            try {\n                throw new Error(`ZalgoPromise`);\n            } catch (err) {\n                this.stack = err.stack;\n            }\n        }\n    }\n\n    resolve(result : R) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(result)) {\n            throw new Error('Can not resolve promise with another promise');\n        }\n\n        this.resolved = true;\n        this.value = result;\n        this.dispatch();\n\n        return this;\n    }\n\n    reject(error : mixed) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(error)) {\n            throw new Error('Can not reject promise with another promise');\n        }\n\n        if (!error) {\n            let err = (error && typeof error.toString === 'function' ? error.toString() : Object.prototype.toString.call(error));\n            error = new Error(`Expected reject to be called with Error, got ${ err }`);\n        }\n\n        this.rejected = true;\n        this.error = error;\n\n        if (!this.errorHandled) {\n            setTimeout(() => {\n                if (!this.errorHandled) {\n                    dispatchPossiblyUnhandledError(error, this);\n                }\n            }, 1);\n        }\n\n        this.dispatch();\n\n        return this;\n    }\n\n    asyncReject(error : mixed) : ZalgoPromise<R> {\n        this.errorHandled = true;\n        this.reject(error);\n        return this;\n    }\n\n    // eslint-disable-next-line complexity\n    dispatch() {\n\n        let { dispatching, resolved, rejected, handlers } = this;\n\n        if (dispatching) {\n            return;\n        }\n\n        if (!resolved && !rejected) {\n            return;\n        }\n\n        this.dispatching = true;\n        getGlobal().activeCount += 1;\n\n        for (let i = 0; i < handlers.length; i++) {\n\n            let { onSuccess, onError, promise } = handlers[i];\n\n            let result;\n\n            if (resolved) {\n\n                try {\n                    result = onSuccess ? onSuccess(this.value) : this.value;\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n\n            } else if (rejected) {\n\n                if (!onError) {\n                    promise.reject(this.error);\n                    continue;\n                }\n\n                try {\n                    result = onError(this.error);\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n            }\n\n            if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n\n                if (result.resolved) {\n                    promise.resolve(result.value);\n                } else {\n                    promise.reject(result.error);\n                }\n\n                result.errorHandled = true;\n\n            } else if (isPromise(result)) {\n\n                if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n                    if (result.resolved) {\n                        promise.resolve(result.value);\n                    } else {\n                        promise.reject(result.error);\n                    }\n\n                } else {\n                    // $FlowFixMe\n                    result.then(res => {\n                        promise.resolve(res);\n                    }, err => {\n                        promise.reject(err);\n                    });\n                }\n\n            } else {\n\n                promise.resolve(result);\n            }\n        }\n\n        handlers.length = 0;\n        this.dispatching = false;\n        getGlobal().activeCount -= 1;\n\n        if (getGlobal().activeCount === 0) {\n            ZalgoPromise.flushQueue();\n        }\n    }\n\n    then<X : mixed, Y : mixed>(onSuccess : void | (result : R) => (ZalgoPromise<X> | Y), onError : void | (error : mixed) => (ZalgoPromise<X> | Y)) : ZalgoPromise<X | Y> {\n\n        if (onSuccess && typeof onSuccess !== 'function' && !onSuccess.call) {\n            throw new Error('Promise.then expected a function for success handler');\n        }\n\n        if (onError && typeof onError !== 'function' && !onError.call) {\n            throw new Error('Promise.then expected a function for error handler');\n        }\n\n        let promise : ZalgoPromise<X | Y> = new ZalgoPromise();\n\n        this.handlers.push({\n            promise,\n            onSuccess,\n            onError\n        });\n\n        this.errorHandled = true;\n\n        this.dispatch();\n\n        return promise;\n    }\n\n    catch<X : mixed, Y : mixed>(onError : (error : mixed) => ZalgoPromise<X> | Y) : ZalgoPromise<X | Y> {\n        return this.then(undefined, onError);\n    }\n\n    finally(onFinally : () => mixed) : ZalgoPromise<R> {\n\n        if (onFinally && typeof onFinally !== 'function' && !onFinally.call) {\n            throw new Error('Promise.finally expected a function');\n        }\n\n        return this.then((result) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    return result;\n                });\n        }, (err) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    throw err;\n                });\n        });\n    }\n\n    timeout(time : number, err : ?Error) : ZalgoPromise<R> {\n\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        let timeout = setTimeout(() => {\n\n            if (this.resolved || this.rejected) {\n                return;\n            }\n\n            this.reject(err || new Error(`Promise timed out after ${ time }ms`));\n\n        }, time);\n\n        return this.then(result => {\n            clearTimeout(timeout);\n            return result;\n        });\n    }\n\n    // $FlowFixMe\n    toPromise() : Promise<R> {\n        // $FlowFixMe\n        if (typeof Promise === 'undefined') {\n            throw new TypeError(`Could not find Promise`);\n        }\n        // $FlowFixMe\n        return Promise.resolve(this); // eslint-disable-line compat/compat\n    }\n\n    static resolve<X : mixed>(value : X | ZalgoPromise<X>) : ZalgoPromise<X> {\n\n        if (value instanceof ZalgoPromise) {\n            return value;\n        }\n\n        if (isPromise(value)) {\n            // $FlowFixMe\n            return new ZalgoPromise((resolve, reject) => value.then(resolve, reject));\n        }\n\n        return new ZalgoPromise().resolve(value);\n    }\n\n    static reject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().reject(error);\n    }\n\n    static asyncReject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().asyncReject(error);\n    }\n\n    static all<X : [*] | [*, *] | [*, *, *] | [*, *, *, *] | [*, *, *, *, *] | [*, *, *, *, *, *] | [*, *, *, *, *, *, *] | [*, *, *, *, *, *, *, *] | [*, *, *, *, *, *, *, *, *] | Array<mixed>>(promises : X) : ZalgoPromise<$TupleMap<X, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n\n        let promise = new ZalgoPromise();\n        let count = promises.length;\n        let results = [];\n\n        if (!count) {\n            promise.resolve(results);\n            return promise;\n        }\n\n        for (let i = 0; i < promises.length; i++) {\n            let prom = promises[i];\n\n            if (prom instanceof ZalgoPromise) {\n                if (prom.resolved) {\n                    results[i] = prom.value;\n                    count -= 1;\n                    continue;\n                }\n            } else if (!isPromise(prom)) {\n                results[i] = prom;\n                count -= 1;\n                continue;\n            }\n\n            ZalgoPromise.resolve(prom).then(result => {\n                results[i] = result;\n                count -= 1;\n                if (count === 0) {\n                    promise.resolve(results);\n                }\n            }, err => {\n                promise.reject(err);\n            });\n        }\n\n        if (count === 0) {\n            promise.resolve(results);\n        }\n\n        return promise;\n    }\n\n    static hash<O : { [string] : * }>(promises : O) : ZalgoPromise<$ObjMap<O, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n        let result = {};\n        \n        return ZalgoPromise.all(Object.keys(promises).map(key => {\n            return ZalgoPromise.resolve(promises[key]).then(value => {\n                result[key] = value;\n            });\n        })).then(() => {\n            return result;\n        });\n    }\n\n    static map<T, X>(items : Array<T>, method : (T) => (ZalgoPromise<X> | X)) : ZalgoPromise<Array<X>> {\n        // $FlowFixMe\n        return ZalgoPromise.all(items.map(method));\n    }\n\n    static onPossiblyUnhandledException(handler : (err : mixed) => void) : { cancel : () => void } {\n        return onPossiblyUnhandledException(handler);\n    }\n\n    static try<X : mixed, Y : mixed, C : mixed, A : Array<mixed>>(method : (...args : A) => (ZalgoPromise<X> | Y), context : ?C, args : ?A) : ZalgoPromise<X | Y> {\n\n        if (method && typeof method !== 'function' && !method.call) {\n            throw new Error('Promise.try expected a function');\n        }\n\n        let result;\n        \n        try {\n            // $FlowFixMe\n            result = method.apply(context, args || []);\n        } catch (err) {\n            return ZalgoPromise.reject(err);\n        }\n\n        return ZalgoPromise.resolve(result);\n    }\n\n    static delay(delay : number) : ZalgoPromise<void> {\n        return new ZalgoPromise(resolve => {\n            setTimeout(resolve, delay);\n        });\n    }\n\n    static isPromise(value : mixed) : boolean {\n\n        if (value && value instanceof ZalgoPromise) {\n            return true;\n        }\n\n        return isPromise(value);\n    }\n\n    static flush() : ZalgoPromise<void> {\n        let promise = new ZalgoPromise();\n        getGlobal().flushPromises.push(promise);\n\n        if (getGlobal().activeCount === 0) {\n            ZalgoPromise.flushQueue();\n        }\n\n        return promise;\n    }\n\n    static flushQueue() {\n        let promisesToFlush = getGlobal().flushPromises;\n        getGlobal().flushPromises = [];\n\n        for (let promise of promisesToFlush) {\n            promise.resolve();\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/zalgo-promise/src/promise.js","/* @flow */\n\nimport { getGlobal } from './global';\nimport type { ZalgoPromise } from './promise';\n\nexport function dispatchPossiblyUnhandledError<T>(err : mixed, promise : ZalgoPromise<T>) {\n\n    if (getGlobal().dispatchedErrors.indexOf(err) !== -1) {\n        return;\n    }\n\n    getGlobal().dispatchedErrors.push(err);\n\n    setTimeout(() => {\n        if (__DEBUG__) {\n            // $FlowFixMe\n            throw new Error(`${ err.stack || err.toString() }\\n\\nFrom promise:\\n\\n${ promise.stack }`);\n        }\n\n        throw err;\n    }, 1);\n\n    for (let j = 0; j < getGlobal().possiblyUnhandledPromiseHandlers.length; j++) {\n        getGlobal().possiblyUnhandledPromiseHandlers[j](err, promise);\n    }\n}\n\nexport function onPossiblyUnhandledException(handler : (mixed) => void) : { cancel : () => void } {\n    getGlobal().possiblyUnhandledPromiseHandlers.push(handler);\n\n    return {\n        cancel() {\n            getGlobal().possiblyUnhandledPromiseHandlers.splice(getGlobal().possiblyUnhandledPromiseHandlers.indexOf(handler), 1);\n        }\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/zalgo-promise/src/exceptions.js","/* @flow */\n\nimport { CONSTANTS } from './conf';\n\nexport let global : Object = window[CONSTANTS.WINDOW_PROPS.POSTROBOT] = window[CONSTANTS.WINDOW_PROPS.POSTROBOT] || {};\n\n// Backwards compatibility\n\nglobal.registerSelf = () => {\n    // pass\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/global.js","/* @flow */\n\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\nimport { matchDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nimport { CONSTANTS } from '../conf';\nimport { global } from '../global';\n\nimport { once, uniqueID, replaceObject, stringifyError, isRegex } from './util';\n\nglobal.methods = global.methods || new WeakMap();\n\nexport let listenForMethods = once(() => {\n    global.on(CONSTANTS.POST_MESSAGE_NAMES.METHOD, { origin: CONSTANTS.WILDCARD }, ({ source, origin, data } : { source : CrossDomainWindowType, origin : string, data : Object }) => {\n\n        let methods = global.methods.get(source);\n\n        if (!methods) {\n            throw new Error(`Could not find any methods this window has privileges to call`);\n        }\n\n        let meth = methods[data.id];\n\n        if (!meth) {\n            throw new Error(`Could not find method with id: ${ data.id }`);\n        }\n\n        if (!matchDomain(meth.domain, origin)) {\n            throw new Error(`Method domain ${ meth.domain } does not match origin ${ origin }`);\n        }\n\n        return ZalgoPromise.try(() => {\n            return meth.method.apply({ source, origin, data }, data.args);\n\n        }).then(result => {\n\n            return {\n                result,\n                id:   data.id,\n                name: data.name\n            };\n        });\n    });\n});\n\nfunction isSerialized(item : mixed, type : string) : boolean {\n    return typeof item === 'object' && item !== null && item.__type__ === type;\n}\n\ntype SerializedMethod = {\n    __type__ : string,\n    __id__ : string,\n    __name__ : string\n};\n\nexport function serializeMethod(destination : CrossDomainWindowType, domain : string | Array<string>, method : Function, name : string) : SerializedMethod {\n\n    let id = uniqueID();\n\n    let methods = global.methods.get(destination);\n\n    if (!methods) {\n        methods = {};\n        global.methods.set(destination, methods);\n    }\n\n    methods[id] = { domain, method };\n\n    return {\n        __type__: CONSTANTS.SERIALIZATION_TYPES.METHOD,\n        __id__:   id,\n        __name__: name\n    };\n}\n\ntype SerializedError = {\n    __type__ : string,\n    __message__ : string\n};\n\nfunction serializeError(err : mixed) : SerializedError {\n    return {\n        __type__:    CONSTANTS.SERIALIZATION_TYPES.ERROR,\n        __message__: stringifyError(err),\n        // $FlowFixMe\n        __code__:    err.code\n    };\n}\n\ntype SerializePromise = {\n    __type__ : string,\n    __then__ : SerializedMethod\n};\n\nfunction serializePromise(destination : CrossDomainWindowType, domain : string | Array<string>, promise : ZalgoPromise<mixed>, name : string) : SerializePromise {\n    return {\n        __type__: CONSTANTS.SERIALIZATION_TYPES.PROMISE,\n        __then__: serializeMethod(destination, domain, (resolve, reject) => promise.then(resolve, reject), `${ name }.then`)\n    };\n}\n\nfunction serializeZalgoPromise(destination : CrossDomainWindowType, domain : string | Array<string>, promise : ZalgoPromise<mixed>, name : string) : SerializePromise {\n    return {\n        __type__: CONSTANTS.SERIALIZATION_TYPES.ZALGO_PROMISE,\n        __then__: serializeMethod(destination, domain, (resolve, reject) => promise.then(resolve, reject), `${ name }.then`)\n    };\n}\n\ntype SerializedRegex = {\n    __type__ : string,\n    __source__ : string\n};\n\nfunction serializeRegex(regex : RegExp) : SerializedRegex {\n    return {\n        __type__:   CONSTANTS.SERIALIZATION_TYPES.REGEX,\n        __source__: regex.source\n    };\n}\n\nexport function serializeMethods(destination : CrossDomainWindowType, domain : string | Array<string>, obj : Object) : Object {\n\n    return replaceObject({ obj }, (item, key) => {\n        if (typeof item === 'function') {\n            return serializeMethod(destination, domain, item, key.toString());\n        }\n\n        if (item instanceof Error) {\n            return serializeError(item);\n        }\n\n        if (window.Promise && item instanceof window.Promise) {\n            return serializePromise(destination, domain, item, key.toString());\n        }\n\n        if (ZalgoPromise.isPromise(item)) {\n            // $FlowFixMe\n            return serializeZalgoPromise(destination, domain, item, key.toString());\n        }\n\n        if (isRegex(item)) {\n            // $FlowFixMe\n            return serializeRegex(item);\n        }\n    }).obj;\n}\n\nexport function deserializeMethod(source : CrossDomainWindowType, origin : string, obj : Object) : Function {\n\n    function wrapper() : ZalgoPromise<mixed> {\n        let args = Array.prototype.slice.call(arguments);\n        return global.send(source, CONSTANTS.POST_MESSAGE_NAMES.METHOD, {\n            id:   obj.__id__,\n            name: obj.__name__,\n            args\n\n        }, { domain: origin, timeout: -1 }).then(({ data }) => {\n            return data.result;\n        }, err => {\n            throw err;\n        });\n    }\n\n    wrapper.__name__ = obj.__name__;\n    wrapper.__xdomain__ = true;\n\n    wrapper.source = source;\n    wrapper.origin = origin;\n\n    return wrapper;\n}\n\nexport function deserializeError(source : CrossDomainWindowType, origin : string, obj : Object) : Error {\n    let err = new Error(obj.__message__);\n    if (obj.__code__) {\n        // $FlowFixMe\n        err.code = obj.__code__;\n    }\n    return err;\n}\n\nexport function deserializeZalgoPromise(source : CrossDomainWindowType, origin : string, prom : Object) : ZalgoPromise<mixed> {\n    return new ZalgoPromise((resolve, reject) => deserializeMethod(source, origin, prom.__then__)(resolve, reject));\n}\n\nexport function deserializePromise(source : CrossDomainWindowType, origin : string, prom : Object) : ZalgoPromise<mixed> {\n    if (!window.Promise) {\n        return deserializeZalgoPromise(source, origin, prom);\n    }\n\n    return new window.Promise((resolve, reject) => deserializeMethod(source, origin, prom.__then__)(resolve, reject));\n}\n\nexport function deserializeRegex(source : CrossDomainWindowType, origin : string, item : Object) : RegExp {\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    return new RegExp(item.__source__);\n}\n\nexport function deserializeMethods(source : CrossDomainWindowType, origin : string, obj : Object) : Object {\n\n    return replaceObject({ obj }, (item) => {\n        if (typeof item !== 'object' || item === null) {\n            return;\n        }\n\n        if (isSerialized(item, CONSTANTS.SERIALIZATION_TYPES.METHOD)) {\n            return deserializeMethod(source, origin, item);\n        }\n\n        if (isSerialized(item, CONSTANTS.SERIALIZATION_TYPES.ERROR)) {\n            return deserializeError(source, origin, item);\n        }\n\n        if (isSerialized(item, CONSTANTS.SERIALIZATION_TYPES.PROMISE)) {\n            return deserializePromise(source, origin, item);\n        }\n\n        if (isSerialized(item, CONSTANTS.SERIALIZATION_TYPES.ZALGO_PROMISE)) {\n            return deserializeZalgoPromise(source, origin, item);\n        }\n\n        if (isSerialized(item, CONSTANTS.SERIALIZATION_TYPES.REGEX)) {\n            return deserializeRegex(source, origin, item);\n        }\n\n    }).obj;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/serialize.js","/* @flow */\n\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\nimport { getAncestor, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nimport { CONSTANTS } from '../conf';\nimport { global } from '../global';\n\nimport { noop } from './util';\n\nglobal.readyPromises = global.readyPromises || new WeakMap();\n\nexport function onHello(handler : ({ source? : CrossDomainWindowType, origin? : string }) => void) {\n    global.on(CONSTANTS.POST_MESSAGE_NAMES.HELLO, { domain: CONSTANTS.WILDCARD }, ({ source, origin }) => {\n        return handler({ source, origin });\n    });\n}\n\nexport function sayHello(win : CrossDomainWindowType) : ZalgoPromise<{ origin : string }> {\n    return global.send(win, CONSTANTS.POST_MESSAGE_NAMES.HELLO, {}, { domain: CONSTANTS.WILDCARD, timeout: -1 })\n        .then(({ origin }) => {\n            return { origin };\n        });\n}\n\nexport function initOnReady() {\n\n    onHello(({ source, origin }) => {\n        let promise = global.readyPromises.get(source) || new ZalgoPromise();\n        promise.resolve({ origin });\n        global.readyPromises.set(source, promise);\n    });\n\n    let parent = getAncestor();\n    if (parent) {\n        sayHello(parent).catch(noop);\n    }\n}\n\nexport function onChildWindowReady(win : mixed, timeout : number = 5000, name : string = 'Window') : ZalgoPromise<{ origin : string }> {\n\n    let promise = global.readyPromises.get(win);\n\n    if (promise) {\n        return promise;\n    }\n\n    promise = new ZalgoPromise();\n    global.readyPromises.set(win, promise);\n\n    if (timeout !== -1) {\n        setTimeout(() => promise.reject(new Error(`${ name } did not load after ${ timeout }ms`)), timeout);\n    }\n\n    return promise;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/ready.js","/* @flow */\n\nimport { isSameDomain, isSameTopWindow, isActuallySameDomain, getActualDomain, getDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { CONSTANTS } from '../../conf';\nimport { needsGlobalMessagingForBrowser } from '../../lib';\n\nexport let SEND_MESSAGE_STRATEGIES = {};\n\n\nSEND_MESSAGE_STRATEGIES[CONSTANTS.SEND_STRATEGIES.POST_MESSAGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : (string | Array<string>)) => {\n\n    if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n        try {\n            require('../../compat').emulateIERestrictions(window, win);\n        } catch (err) {\n            return;\n        }\n    }\n\n    let domains;\n\n    if (Array.isArray(domain)) {\n        domains = domain;\n    } else if (typeof domain === 'string') {\n        domains = [ domain ];\n    } else {\n        domains = [ CONSTANTS.WILDCARD ];\n    }\n\n    domains = domains.map(dom => {\n\n        if (dom.indexOf(CONSTANTS.MOCK_PROTOCOL) === 0) {\n\n            if (window.location.protocol === CONSTANTS.FILE_PROTOCOL) {\n                return CONSTANTS.WILDCARD;\n            }\n\n            if (!isActuallySameDomain(win)) {\n                throw new Error(`Attempting to send messsage to mock domain ${ dom }, but window is actually cross-domain`);\n            }\n\n            // $FlowFixMe\n            return getActualDomain(win);\n        }\n\n        if (dom.indexOf(CONSTANTS.FILE_PROTOCOL) === 0) {\n            return CONSTANTS.WILDCARD;\n        }\n\n        return dom;\n    });\n\n    domains.forEach(dom => {\n        return win.postMessage(serializedMessage, dom);\n    });\n};\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n\n    let { sendBridgeMessage, needsBridgeForBrowser, isBridge } = require('../../bridge');\n\n    SEND_MESSAGE_STRATEGIES[CONSTANTS.SEND_STRATEGIES.BRIDGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : string) => {\n\n        if (!needsBridgeForBrowser() && !isBridge()) {\n            return;\n        }\n\n        if (isSameDomain(win)) {\n            throw new Error(`Post message through bridge disabled between same domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use bridge to communicate between two different windows, not between frames`);\n        }\n\n        return sendBridgeMessage(win, serializedMessage, domain);\n    };\n}\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__ || __POST_ROBOT__.__GLOBAL_MESSAGE_SUPPORT__) {\n    \n    SEND_MESSAGE_STRATEGIES[CONSTANTS.SEND_STRATEGIES.GLOBAL] = (win : CrossDomainWindowType, serializedMessage : string) => {\n\n        if (!needsGlobalMessagingForBrowser()) {\n            return;\n        }\n\n        if (!isSameDomain(win)) {\n            throw new Error(`Post message through global disabled between different domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use global to communicate between two different windows, not between frames`);\n        }\n\n        // $FlowFixMe\n        let foreignGlobal = win[CONSTANTS.WINDOW_PROPS.POSTROBOT];\n\n        if (!foreignGlobal) {\n            throw new Error(`Can not find postRobot global on foreign window`);\n        }\n\n        return foreignGlobal.receiveMessage({\n            source: window,\n            origin: getDomain(),\n            data:   serializedMessage\n        });\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/drivers/send/strategies.js","/* @flow */\n\nimport { getDomain, isWindowClosed, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nimport { CONSTANTS, CONFIG, POST_MESSAGE_NAMES_LIST } from '../../conf';\nimport { uniqueID, serializeMethods, getWindowType, jsonStringify, stringifyError } from '../../lib';\n\nimport { SEND_MESSAGE_STRATEGIES } from './strategies';\n\n\nfunction buildMessage(win : CrossDomainWindowType, message : Object, options = {}) : Object {\n\n    let id   = uniqueID();\n    let type = getWindowType();\n    let sourceDomain = getDomain(window);\n\n    return {\n        ...message,\n        ...options,\n        sourceDomain,\n        id:         message.id || id,\n        windowType: type\n    };\n}\n\n\nexport function sendMessage(win : CrossDomainWindowType, message : Object, domain : string | Array<string>) : ZalgoPromise<void> {\n    return ZalgoPromise.try(() => {\n\n        message = buildMessage(win, message, {\n            data: serializeMethods(win, domain, message.data),\n            domain\n        });\n\n        let level;\n\n        if (__DEBUG__) {\n            if (POST_MESSAGE_NAMES_LIST.indexOf(message.name) !== -1 || message.type === CONSTANTS.POST_MESSAGE_TYPE.ACK) {\n                level = 'debug';\n            } else if (message.ack === 'error') {\n                level = 'error';\n            } else {\n                level = 'info';\n            }\n\n            // eslint-disable-next-line no-console\n            console[level]('postrobot_send', message.type.replace(/^postrobot_message_/, ''), '::', message.name, '::', domain || CONSTANTS.WILDCARD, '\\n\\n', message);\n        }\n\n        if (win === window && !CONFIG.ALLOW_SAME_ORIGIN) {\n            throw new Error('Attemping to send message to self');\n        }\n\n        if (isWindowClosed(win)) {\n            throw new Error('Window is closed');\n        }\n\n        let messages = [];\n\n        let serializedMessage = jsonStringify({\n            [ CONSTANTS.WINDOW_PROPS.POSTROBOT ]: message\n        }, null, 2);\n\n        return ZalgoPromise.map(Object.keys(SEND_MESSAGE_STRATEGIES), strategyName => {\n\n            return ZalgoPromise.try(() => {\n\n                if (!CONFIG.ALLOWED_POST_MESSAGE_METHODS[strategyName]) {\n                    throw new Error(`Strategy disallowed: ${ strategyName }`);\n                }\n\n                return SEND_MESSAGE_STRATEGIES[strategyName](win, serializedMessage, domain);\n\n            }).then(() => {\n                messages.push(`${ strategyName }: success`);\n                return true;\n            }, err => {\n                messages.push(`${ strategyName }: ${ stringifyError(err) }\\n`);\n                return false;\n            });\n\n        }).then(results => {\n\n            let success = results.some(Boolean);\n            let status = `${ message.type } ${ message.name } ${ success ? 'success' : 'error' }:\\n  - ${ messages.join('\\n  - ') }\\n`;\n\n            if (!success) {\n                throw new Error(status);\n            }\n        });\n    });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/drivers/send/index.js","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\nimport { matchDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { global } from '../global';\nimport { isRegex } from '../lib';\nimport { CONSTANTS } from '../conf';\n\nexport function resetListeners() {\n    global.responseListeners = {};\n    global.requestListeners  = {};\n}\n\nglobal.responseListeners = global.responseListeners || {};\nglobal.requestListeners  = global.requestListeners  || {};\nglobal.WINDOW_WILDCARD   = global.WINDOW_WILDCARD   || new (function WindowWildcard() { /* pass */ })();\n\nglobal.erroredResponseListeners = global.erroredResponseListeners || {};\n\nconst __DOMAIN_REGEX__ = '__domain_regex__';\n\nexport type RequestListenerType = {\n    handler : ({ source : CrossDomainWindowType, origin : string, data : Object }) => (mixed | ZalgoPromise<mixed>),\n    handleError : (err : mixed) => void,\n    window : ?CrossDomainWindowType,\n    name : string,\n    domain : string | RegExp | Array<string>\n};\n\nexport type ResponseListenerType = {\n    name : string,\n    window : CrossDomainWindowType,\n    domain : (string | Array<string> | RegExp),\n    respond : (err : ?mixed, result : ?Object) => void,\n    ack? : ?boolean\n};\n\nexport function addResponseListener(hash : string, listener : ResponseListenerType) {\n    global.responseListeners[hash] = listener;\n}\n\nexport function getResponseListener(hash : string) : ResponseListenerType {\n    return global.responseListeners[hash];\n}\n\nexport function deleteResponseListener(hash : string) {\n    delete global.responseListeners[hash];\n}\n\nexport function markResponseListenerErrored(hash : string) {\n    global.erroredResponseListeners[hash] = true;\n}\n\nexport function isResponseListenerErrored(hash : string) : boolean {\n    return Boolean(global.erroredResponseListeners[hash]);\n}\n\nexport function getRequestListener({ name, win, domain } : { name : string, win : ?CrossDomainWindowType, domain : ?(string | RegExp) }) : ?RequestListenerType {\n\n    if (win === CONSTANTS.WILDCARD) {\n        win = null;\n    }\n\n    if (domain === CONSTANTS.WILDCARD) {\n        domain = null;\n    }\n\n    if (!name) {\n        throw new Error(`Name required to get request listener`);\n    }\n\n    let nameListeners = global.requestListeners[name];\n\n    if (!nameListeners) {\n        return;\n    }\n\n    for (let winQualifier of [ win, global.WINDOW_WILDCARD ]) {\n\n        let winListeners = winQualifier && nameListeners.get(winQualifier);\n\n        if (!winListeners) {\n            continue;\n        }\n\n        if (domain && typeof domain === 'string') {\n            if (winListeners[domain]) {\n                return winListeners[domain];\n            }\n\n            if (winListeners[__DOMAIN_REGEX__]) {\n                for (let { regex, listener } of winListeners[__DOMAIN_REGEX__]) {\n                    if (matchDomain(regex, domain)) {\n                        return listener;\n                    }\n                }\n            }\n        }\n\n        if (winListeners[CONSTANTS.WILDCARD]) {\n            return winListeners[CONSTANTS.WILDCARD];\n        }\n    }\n}\n\n// eslint-disable-next-line complexity\nexport function addRequestListener({ name, win, domain } : { name : string, win : ?CrossDomainWindowType, domain : ?(string | RegExp | Array<string>) }, listener : RequestListenerType) : { cancel : () => void } {\n\n    if (!name || typeof name !== 'string') {\n        throw new Error(`Name required to add request listener`);\n    }\n\n    if (Array.isArray(win)) {\n        let listenersCollection = [];\n\n        for (let item of win) {\n            listenersCollection.push(addRequestListener({ name, domain, win: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (let cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    if (Array.isArray(domain)) {\n        let listenersCollection = [];\n\n        for (let item of domain) {\n            listenersCollection.push(addRequestListener({ name, win, domain: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (let cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    let existingListener = getRequestListener({ name, win, domain });\n\n    if (!win || win === CONSTANTS.WILDCARD) {\n        win = global.WINDOW_WILDCARD;\n    }\n\n    domain = domain || CONSTANTS.WILDCARD;\n\n    if (existingListener) {\n        if (win && domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() } for ${ win === global.WINDOW_WILDCARD ? 'wildcard' : 'specified' } window`);\n        } else if (win) {\n            throw new Error(`Request listener already exists for ${ name } for ${ win === global.WINDOW_WILDCARD ? 'wildcard' : 'specified' } window`);\n        } else if (domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() }`);\n        } else {\n            throw new Error(`Request listener already exists for ${ name }`);\n        }\n    }\n\n    let requestListeners = global.requestListeners;\n\n    let nameListeners = requestListeners[name];\n\n    if (!nameListeners) {\n        nameListeners = new WeakMap();\n        requestListeners[name] = nameListeners;\n    }\n\n    let winListeners  = nameListeners.get(win);\n\n    if (!winListeners) {\n        winListeners = {};\n        nameListeners.set(win, winListeners);\n    }\n\n    let strDomain = domain.toString();\n\n    let regexListeners = winListeners[__DOMAIN_REGEX__];\n    let regexListener;\n\n    if (isRegex(domain)) {\n\n        if (!regexListeners) {\n            regexListeners = [];\n            winListeners[__DOMAIN_REGEX__] = regexListeners;\n        }\n\n        regexListener = { regex: domain, listener };\n\n        regexListeners.push(regexListener);\n\n    } else {\n        winListeners[strDomain] = listener;\n    }\n\n    return {\n        cancel() {\n            if (!winListeners) {\n                return;\n            }\n\n            delete winListeners[strDomain];\n\n            if (win && Object.keys(winListeners).length === 0) {\n                nameListeners.delete(win);\n            }\n\n            if (regexListener) {\n                regexListeners.splice(regexListeners.indexOf(regexListener, 1));\n            }\n        }\n\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/drivers/listeners.js","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindowClosed, matchDomain, stringifyDomainPattern, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { CONSTANTS } from '../../conf';\nimport { stringifyError, noop } from '../../lib';\nimport { sendMessage } from '../send';\nimport { getRequestListener, getResponseListener, deleteResponseListener, isResponseListenerErrored } from '../listeners';\n\nexport let RECEIVE_MESSAGE_TYPES = {\n\n    [ CONSTANTS.POST_MESSAGE_TYPE.ACK ](source : CrossDomainWindowType, origin : string, message : Object) {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        let options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message ack for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Ack origin ${ origin } does not match domain ${ options.domain.toString() }`);\n        }\n\n        options.ack = true;\n    },\n\n    [ CONSTANTS.POST_MESSAGE_TYPE.REQUEST ](source : CrossDomainWindowType, origin : string, message : Object) : ZalgoPromise<void> {\n\n        let options = getRequestListener({ name: message.name, win: source, domain: origin });\n\n        function respond(data) : ZalgoPromise<void> {\n\n            if (message.fireAndForget || isWindowClosed(source)) {\n                return ZalgoPromise.resolve();\n            }\n\n            return sendMessage(source, {\n                target: message.originalSource,\n                hash:   message.hash,\n                name:   message.name,\n                ...data\n            }, origin);\n        }\n\n        return ZalgoPromise.all([\n\n            respond({\n                type: CONSTANTS.POST_MESSAGE_TYPE.ACK\n            }),\n\n            ZalgoPromise.try(() => {\n\n                if (!options) {\n                    throw new Error(`No handler found for post message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n                }\n\n                if (!matchDomain(options.domain, origin)) {\n                    throw new Error(`Request origin ${ origin } does not match domain ${ options.domain.toString() }`);\n                }\n\n                let data = message.data;\n\n                return options.handler({ source, origin, data });\n\n            }).then(data => {\n\n                return respond({\n                    type: CONSTANTS.POST_MESSAGE_TYPE.RESPONSE,\n                    ack:  CONSTANTS.POST_MESSAGE_ACK.SUCCESS,\n                    data\n                });\n\n            }, err => {\n\n                let error = stringifyError(err).replace(/^Error: /, '');\n                // $FlowFixMe\n                let code = err.code;\n\n                return respond({\n                    type: CONSTANTS.POST_MESSAGE_TYPE.RESPONSE,\n                    ack:  CONSTANTS.POST_MESSAGE_ACK.ERROR,\n                    error,\n                    code\n                });\n            })\n\n        ]).then(noop).catch(err => {\n\n            if (options && options.handleError) {\n                return options.handleError(err);\n            } else {\n                throw err;\n            }\n        });\n    },\n\n    [ CONSTANTS.POST_MESSAGE_TYPE.RESPONSE ](source : CrossDomainWindowType, origin : string, message : Object) : void | ZalgoPromise<void> {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        let options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message response for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Response origin ${ origin } does not match domain ${ stringifyDomainPattern(options.domain) }`);\n        }\n\n        deleteResponseListener(message.hash);\n\n        if (message.ack === CONSTANTS.POST_MESSAGE_ACK.ERROR) {\n            let err = new Error(message.error);\n            if (message.code) {\n                // $FlowFixMe\n                err.code = message.code;\n            }\n            return options.respond(err, null);\n        } else if (message.ack === CONSTANTS.POST_MESSAGE_ACK.SUCCESS) {\n            let data = message.data || message.response;\n\n            return options.respond(null, { source, origin, data });\n        }\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/drivers/receive/types.js","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { CONSTANTS, POST_MESSAGE_NAMES_LIST } from '../../conf';\nimport { deserializeMethods, jsonParse, addEventListener, noop } from '../../lib';\nimport { global } from '../../global';\n\nimport { RECEIVE_MESSAGE_TYPES } from './types';\n\nglobal.receivedMessages = global.receivedMessages || [];\n\ntype MessageEvent = {\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string\n};\n\nfunction parseMessage(message : string) : ?Object {\n\n    let parsedMessage;\n\n    try {\n        parsedMessage = jsonParse(message);\n    } catch (err) {\n        return;\n    }\n\n    if (!parsedMessage) {\n        return;\n    }\n\n    if (typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    parsedMessage = parsedMessage[CONSTANTS.WINDOW_PROPS.POSTROBOT];\n\n    if (!parsedMessage || typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    if (!parsedMessage.type || typeof parsedMessage.type !== 'string') {\n        return;\n    }\n\n    if (!RECEIVE_MESSAGE_TYPES[parsedMessage.type]) {\n        return;\n    }\n\n    return parsedMessage;\n}\n\n\nexport function receiveMessage(event : MessageEvent) {\n\n    if (!window || window.closed) {\n        throw new Error(`Message recieved in closed window`);\n    }\n\n    try {\n        if (!event.source) {\n            return;\n        }\n    } catch (err) {\n        return;\n    }\n\n    let { source, origin, data } = event;\n\n    let message = parseMessage(data);\n\n    if (!message) {\n        return;\n    }\n\n    if (!message.sourceDomain || typeof message.sourceDomain !== 'string') {\n        throw new Error(`Expected message to have sourceDomain`);\n    }\n\n    if (message.sourceDomain.indexOf(CONSTANTS.MOCK_PROTOCOL) === 0 || message.sourceDomain.indexOf(CONSTANTS.FILE_PROTOCOL) === 0) {\n        origin = message.sourceDomain;\n    }\n\n    if (global.receivedMessages.indexOf(message.id) === -1) {\n        global.receivedMessages.push(message.id);\n    } else {\n        return;\n    }\n\n    if (__DEBUG__) {\n        let level;\n\n        if (POST_MESSAGE_NAMES_LIST.indexOf(message.name) !== -1 || message.type === CONSTANTS.POST_MESSAGE_TYPE.ACK) {\n            level = 'debug';\n        } else if (message.ack === 'error') {\n            level = 'error';\n        } else {\n            level = 'info';\n        }\n        \n        // eslint-disable-next-line no-console\n        console[level]('postrobot_receive', message.type.replace(/^postrobot_message_/, ''), '::', message.name, '::', origin, '\\n\\n', message);\n    }\n\n    if (isWindowClosed(source) && !message.fireAndForget) {\n        return;\n    }\n\n    if (message.data) {\n        message.data = deserializeMethods(source, origin, message.data);\n    }\n\n    RECEIVE_MESSAGE_TYPES[message.type](source, origin, message);\n}\n\nexport function messageListener(event : { source : CrossDomainWindowType, origin : string, data : string, sourceElement : CrossDomainWindowType, originalEvent? : { origin : string } }) {\n\n    try {\n        noop(event.source);\n    } catch (err) {\n        return;\n    }\n\n    // $FlowFixMe\n    let messageEvent : MessageEvent = {\n        source: event.source || event.sourceElement,\n        origin: event.origin || (event.originalEvent && event.originalEvent.origin),\n        data:   event.data\n    };\n\n    if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n        try {\n            require('../../compat').emulateIERestrictions(messageEvent.source, window);\n        } catch (err) {\n            return;\n        }\n    }\n\n    receiveMessage(messageEvent);\n}\n\nexport function listenForMessages() {\n    addEventListener(window, 'message', messageListener);\n}\n\nglobal.receiveMessage = receiveMessage;\n\n\n\n// WEBPACK FOOTER //\n// ./src/drivers/receive/index.js","/* @flow */\n\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getAncestor, isAncestor, isWindowClosed, getDomain, matchDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { CONFIG, CONSTANTS } from '../conf';\nimport { sendMessage, addResponseListener, deleteResponseListener, markResponseListenerErrored, type ResponseListenerType } from '../drivers';\nimport { uniqueID, onChildWindowReady, sayHello, isRegex } from '../lib';\nimport { global } from '../global';\n\nglobal.requestPromises = global.requestPromises || new WeakMap();\n\ntype WindowResolverType = CrossDomainWindowType | string | HTMLIFrameElement;\n\ntype RequestOptionsType = {\n    window? : ?WindowResolverType,\n    domain? : ?(string | Array<string> | RegExp),\n    name? : ?string,\n    data? : ?Object,\n    fireAndForget? : ?boolean,\n    timeout? : ?number\n};\n\ntype ResponseMessageEvent = {\n    source : CrossDomainWindowType,\n    origin : string,\n    data : Object\n};\n\nexport function request(options : RequestOptionsType) : ZalgoPromise<ResponseMessageEvent> {\n\n    let prom = ZalgoPromise.try(() => {\n\n        if (!options.name) {\n            throw new Error('Expected options.name');\n        }\n\n        let name = options.name;\n        let targetWindow : ?CrossDomainWindowType;\n        let domain : string | Array<string> | RegExp;\n\n        if (typeof options.window === 'string') {\n            let el = document.getElementById(options.window);\n\n            if (!el) {\n                throw new Error(`Expected options.window ${ Object.prototype.toString.call(options.window) } to be a valid element id`);\n            }\n\n            if (el.tagName.toLowerCase() !== 'iframe') {\n                throw new Error(`Expected options.window ${ Object.prototype.toString.call(options.window) } to be an iframe`);\n            }\n\n            // $FlowFixMe\n            if (!el.contentWindow) {\n                throw new Error('Iframe must have contentWindow.  Make sure it has a src attribute and is in the DOM.');\n            }\n\n            // $FlowFixMe\n            targetWindow = el.contentWindow;\n\n        } else if (options.window instanceof HTMLIFrameElement) {\n\n            if (options.window.tagName.toLowerCase() !== 'iframe') {\n                throw new Error(`Expected options.window ${ Object.prototype.toString.call(options.window) } to be an iframe`);\n            }\n\n            if (options.window && !options.window.contentWindow) {\n                throw new Error('Iframe must have contentWindow.  Make sure it has a src attribute and is in the DOM.');\n            }\n\n            if (options.window && options.window.contentWindow) {\n                // $FlowFixMe\n                targetWindow = options.window.contentWindow;\n            }\n        } else {\n            targetWindow = options.window;\n        }\n\n        if (!targetWindow) {\n            throw new Error('Expected options.window to be a window object, iframe, or iframe element id.');\n        }\n\n        const win = targetWindow;\n\n        domain = options.domain || CONSTANTS.WILDCARD;\n\n        let hash = `${ options.name }_${ uniqueID() }`;\n\n        if (isWindowClosed(win)) {\n            throw new Error('Target window is closed');\n        }\n\n        let hasResult = false;\n\n        let requestPromises = global.requestPromises.get(win);\n\n        if (!requestPromises) {\n            requestPromises = [];\n            global.requestPromises.set(win, requestPromises);\n        }\n\n        let requestPromise = ZalgoPromise.try(() => {\n\n            if (isAncestor(window, win)) {\n                return onChildWindowReady(win, options.timeout || CONFIG.CHILD_WINDOW_TIMEOUT);\n            }\n\n        }).then(({ origin } = {}) => {\n\n            if (isRegex(domain) && !origin) {\n                return sayHello(win);\n            }\n\n        }).then(({ origin } = {}) => {\n\n            if (isRegex(domain)) {\n                if (!matchDomain(domain, origin)) {\n                    throw new Error(`Remote window domain ${ origin } does not match regex: ${ domain.toString() }`);\n                }\n\n                domain = origin;\n            }\n\n            if (typeof domain !== 'string' && !Array.isArray(domain)) {\n                throw new TypeError(`Expected domain to be a string or array`);\n            }\n\n            const actualDomain = domain;\n\n            return new ZalgoPromise((resolve, reject) => {\n\n                let responseListener : ResponseListenerType;\n\n                if (!options.fireAndForget) {\n                    responseListener = {\n                        name,\n                        window: win,\n                        domain: actualDomain,\n                        respond(err, result) {\n                            if (!err) {\n                                hasResult = true;\n                                requestPromises.splice(requestPromises.indexOf(requestPromise, 1));\n                            }\n\n                            if (err) {\n                                reject(err);\n                            } else {\n                                resolve(result);\n                            }\n                        }\n                    };\n\n                    addResponseListener(hash, responseListener);\n                }\n\n                sendMessage(win, {\n                    type:          CONSTANTS.POST_MESSAGE_TYPE.REQUEST,\n                    hash,\n                    name,\n                    data:          options.data,\n                    fireAndForget: options.fireAndForget\n                }, actualDomain).catch(reject);\n\n                if (options.fireAndForget) {\n                    return resolve();\n                }\n\n                let ackTimeout = CONFIG.ACK_TIMEOUT;\n                let resTimeout = options.timeout || CONFIG.RES_TIMEOUT;\n\n                let cycleTime = 100;\n\n                let cycle = () => {\n\n                    if (hasResult) {\n                        return;\n                    }\n\n                    if (isWindowClosed(win)) {\n\n                        if (!responseListener.ack) {\n                            return reject(new Error(`Window closed for ${ name } before ack`));\n                        }\n\n                        return reject(new Error(`Window closed for ${ name } before response`));\n                    }\n\n                    ackTimeout = Math.max(ackTimeout - cycleTime, 0);\n                    if (resTimeout !== -1) {\n                        resTimeout = Math.max(resTimeout - cycleTime, 0);\n                    }\n\n                    let hasAck = responseListener.ack;\n\n                    if (hasAck) {\n\n                        if (resTimeout === -1) {\n                            return;\n                        }\n\n                        cycleTime = Math.min(resTimeout, 2000);\n\n                    } else if (ackTimeout === 0) {\n                        return reject(new Error(`No ack for postMessage ${ name } in ${ getDomain() } in ${ CONFIG.ACK_TIMEOUT }ms`));\n\n                    } else if (resTimeout === 0) {\n                        return reject(new Error(`No response for postMessage ${ name } in ${ getDomain() } in ${ options.timeout || CONFIG.RES_TIMEOUT }ms`));\n                    }\n\n                    setTimeout(cycle, cycleTime);\n                };\n\n                setTimeout(cycle, cycleTime);\n            });\n        });\n\n        requestPromise.catch(() => {\n            markResponseListenerErrored(hash);\n            deleteResponseListener(hash);\n        });\n\n        requestPromises.push(requestPromise);\n\n        return requestPromise;\n    });\n\n    return prom;\n}\n\nexport function send(window : WindowResolverType, name : string, data : ?Object, options : ?RequestOptionsType) : ZalgoPromise<ResponseMessageEvent> {\n\n    options = options || {};\n    options.window = window;\n    options.name = name;\n    options.data = data;\n\n    return request(options);\n}\n\nexport function sendToParent(name : string, data : ?Object, options : ?RequestOptionsType) : ZalgoPromise<ResponseMessageEvent> {\n\n    let win = getAncestor();\n\n    if (!win) {\n        return new ZalgoPromise((resolve, reject) => reject(new Error('Window does not have a parent')));\n    }\n\n    return send(win, name, data, options);\n}\n\nexport function client(options : RequestOptionsType = {}) : { send : (string, ?Object) => ZalgoPromise<ResponseMessageEvent> } {\n\n    if (!options.window) {\n        throw new Error(`Expected options.window`);\n    }\n\n    const win = options.window;\n\n    return {\n        send(name : string, data : ?Object) : ZalgoPromise<ResponseMessageEvent> {\n            return send(win, name, data, options);\n        }\n    };\n}\n\nglobal.send = send;\n\n\n\n// WEBPACK FOOTER //\n// ./src/public/client.js","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nimport { once as onceFunction, safeInterval } from '../lib';\nimport { addRequestListener, type RequestListenerType } from '../drivers';\nimport { CONSTANTS } from '../conf';\nimport { global } from '../global';\n\ntype ErrorHandlerType = (err : mixed) => void;\ntype HandlerType = ({ source : CrossDomainWindowType, origin : string, data : Object }) => (void | mixed | ZalgoPromise<mixed>);\n\ntype ServerOptionsType = {\n    handler? : ?HandlerType,\n    errorHandler? : ?ErrorHandlerType,\n    window? : CrossDomainWindowType,\n    name? : ?string,\n    domain? : ?(string | RegExp | Array<string>),\n    once? : ?boolean,\n    errorOnClose? : ?boolean\n};\n\nexport function listen(options : ServerOptionsType) : { cancel : () => void } {\n\n    if (!options.name) {\n        throw new Error('Expected options.name');\n    }\n\n    if (!options.handler) {\n        throw new Error('Expected options.handler');\n    }\n\n    const name = options.name;\n    const win = options.window;\n    const domain = options.domain;\n\n    let listenerOptions : RequestListenerType = {\n        handler:     options.handler,\n        handleError: options.errorHandler || (err => {\n            throw err;\n        }),\n        window: win,\n        domain: domain || CONSTANTS.WILDCARD,\n        name\n    };\n\n    let requestListener = addRequestListener({ name, win, domain }, listenerOptions);\n\n    if (options.once) {\n        let handler = listenerOptions.handler;\n        listenerOptions.handler = onceFunction(function listenOnce() : mixed | ZalgoPromise<mixed> {\n            requestListener.cancel();\n            return handler.apply(this, arguments);\n        });\n    }\n\n    if (listenerOptions.window && options.errorOnClose) {\n        let interval = safeInterval(() => {\n            if (win && typeof win === 'object' && isWindowClosed(win)) {\n                interval.cancel();\n                listenerOptions.handleError(new Error('Post message target window is closed'));\n            }\n        }, 50);\n    }\n\n    return {\n        cancel() {\n            requestListener.cancel();\n        }\n    };\n}\n\nexport function on(name : string, options : ServerOptionsType | HandlerType, handler : ?HandlerType) : { cancel : () => void } {\n\n    if (typeof options === 'function') {\n        handler = options;\n        options = {};\n    }\n\n    options = options || {};\n\n    options.name = name;\n    options.handler = handler || options.handler;\n\n    return listen(options);\n}\n\nexport function once(name : string, options : ?(ServerOptionsType | HandlerType) = {}, handler : ?HandlerType) : ZalgoPromise<{ source : mixed, origin : string, data : Object }> {\n\n    if (typeof options === 'function') {\n        handler = options;\n        options = {};\n    }\n\n    options = options || {};\n    handler = handler || options.handler;\n    let errorHandler = options.errorHandler;\n\n    let promise = new ZalgoPromise((resolve, reject) => {\n\n        options = options || {};\n\n        options.name = name;\n        options.once = true;\n\n        options.handler = (event) => {\n            resolve(event);\n            if (handler) {\n                return handler(event);\n            }\n        };\n\n        options.errorHandler = (err) => {\n            reject(err);\n            if (errorHandler) {\n                return errorHandler(err);\n            }\n        };\n    });\n\n    let onceListener = listen(options);\n    promise.cancel = onceListener.cancel;\n\n    return promise;\n}\n\nexport function listener(options : ServerOptionsType = {}) : { on : (name : string, handler : HandlerType) => { cancel : () => void } } {\n\n    return {\n        on(name : string, handler : HandlerType) : { cancel : () => void } {\n            return on(name, options, handler);\n        }\n    };\n}\n\nglobal.on = on;\n\n\n\n// WEBPACK FOOTER //\n// ./src/public/server.js","/* @flow */\n\nimport { CONSTANTS } from '../conf';\nimport { messageListener } from '../drivers';\n\nexport { CONFIG, CONSTANTS } from '../conf';\n\nexport function disable() {\n    delete window[CONSTANTS.WINDOW_PROPS.POSTROBOT];\n    window.removeEventListener('message', messageListener);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/public/config.js","/* @flow */\n\nimport { getAncestor } from 'cross-domain-utils/src';\n\nexport * from './client';\nexport * from './server';\nexport * from './config';\n\nexport let parent = getAncestor();\n\n\n\n// WEBPACK FOOTER //\n// ./src/public/index.js","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { global } from './global';\n\nexport function cleanUpWindow(win : CrossDomainWindowType) {\n\n    // global.tunnelWindows\n    // global.bridges\n    // global.popupWindowsByName\n    // global.responseListeners\n    // global.requestListeners\n\n    let requestPromises = global.requestPromises.get(win);\n\n    if (requestPromises) {\n        for (let promise of requestPromises) {\n            promise.reject(new Error(`No response from window - cleaned up`));\n        }\n    }\n\n    if (global.popupWindowsByWin) {\n        global.popupWindowsByWin.delete(win);\n    }\n\n    if (global.remoteWindows) {\n        global.remoteWindows.delete(win);\n    }\n\n    global.requestPromises.delete(win);\n    global.methods.delete(win);\n    global.readyPromises.delete(win);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/clean.js","/* @flow */\n\nimport { initOnReady, listenForMethods } from './lib';\nimport { listenForMessages } from './drivers';\nimport { global } from './global';\nimport { on, send } from './public';\n\nexport * from './public';\nexport { cleanUpWindow } from './clean';\nexport { ZalgoPromise as Promise } from 'zalgo-promise/src';\nexport let bridge = __POST_ROBOT__.__IE_POPUP_SUPPORT__ ? require('./bridge/interface') : null;\n\nexport function init() {\n    if (!global.initialized) {\n        listenForMessages();\n\n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            require('./bridge').openTunnelToOpener();\n        }\n\n        initOnReady();\n        listenForMethods({ on, send });\n    }\n\n    global.initialized = true;\n}\n\ninit();\n\n\n\n// WEBPACK FOOTER //\n// ./src/interface.js","/* @flow */\n\n// eslint-disable-next-line import/no-namespace\nimport * as INTERFACE from './interface';\n\nexport * from './interface';\nexport default INTERFACE;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}