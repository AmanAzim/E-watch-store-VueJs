'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = function (ComponentStyle) {
  var createStyledComponent = function createStyledComponent(target, rules, props) {
    var prevProps = target && typeof target !== 'string' ? (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' ? target.props : typeof target === 'function' ? target.options.props : {} : {};
    var mergedProps = Object.assign({}, prevProps, props);

    var componentStyle = new ComponentStyle(rules);

    var StyledComponent = {
      inject: {
        theme: {
          default: {}
        }
      },
      props: mergedProps,
      render: function render(createElement) {
        var children = [];
        for (var slot in this.$slots) {
          if (slot === 'default') {
            children.push(this.$slots[slot]);
          } else {
            children.push(createElement('template', { slot: slot }, this.$slots[slot]));
          }
        }

        return createElement(target, {
          class: [this.generatedClassName],
          props: this.$props,
          domProps: {
            value: this.value
          },
          on: this.$listeners,
          scopedSlots: this.$scopedSlots
        }, children);
      },
      methods: {
        generateAndInjectStyles: function generateAndInjectStyles(componentProps) {
          return componentStyle.generateAndInjectStyles(componentProps);
        }
      },
      computed: {
        generatedClassName: function generatedClassName() {
          var componentProps = Object.assign({ theme: this.theme }, this.$props);
          return this.generateAndInjectStyles(componentProps);
        }
      },
      extend: function extend(extendedRules) {
        return createStyledComponent(target, rules.slice().concat(extendedRules), props);
      },
      withComponent: function withComponent(newTarget) {
        return createStyledComponent(newTarget, rules, props);
      }
    };

    return StyledComponent;
  };

  return createStyledComponent;
};

module.exports = exports['default'];